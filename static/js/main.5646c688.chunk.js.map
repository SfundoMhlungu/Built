{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["inte","inte2","mintosec","breaksec","clicked","breakbegan","App","state","break","session","minute","second","st","reset","clearInterval","setState","q1","document","getElementById","pause","currentTime","error","console","log","convertS","s","min","Math","floor","sec","setInterval","startbreak","play","active","c","up","what","down","style","back","className","id","src","calBack","sep","pos","CalLayout","ses","twocol","three","onClick","this","bind","ses2","React","Component","display","gridTemplateColumns","position","gridTemplateRows","height","width","top","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5646c688.chunk.js","sourcesContent":["import React from 'react';\n\n// import logo from './logo.svg';\n// import './App.css';   how u import css\nvar inte;\nvar inte2;\nvar mintosec = 25* 60;\nvar breaksec = 5 * 60;\nvar clicked = false;\nvar breakbegan = false;\n\n\n\nclass App extends React.Component {\n\n  state = {\n    break : 5,\n    session: 25,\n    minute: '25:00',\n    second: '00',\n    st : 'Session'\n  }\n\n//should reset \nreset = () =>{\n  clearInterval(inte)\n  clearInterval(inte2)\n  clicked = false\n  breakbegan = false\n  this.setState({\n    break: 5,\n    session: 25,\n    minute: '25:00',\n    st: 'Session'\n  })\n  var q1 = document.getElementById('beep');\n\n    try {\n      q1.pause();\n      q1.currentTime = 0;\n      \n    } catch (error) {\n      console.log('i dont care')\n    }\n        \n\n}\n\n//formatting\nconvertS = (s) =>{\n  var min = Math.floor(s/60);\n  var sec = s % 60;\n\n\n  if(s < 600){\n    if(sec < 10){\n      return '0' + min + ':0' + sec\n\n    }\n    else{\n      return '0' + min + ':' + sec\n    }\n   \n  }\n  else{\n\n    if(sec < 10){\n      return  min + ':0' + sec\n\n    }\n    else{\n      return   min + ':' + sec\n    }\n  }\n  \n}\n//break interval init\nbreak = () =>{\n  \n\n\ninte2 = setInterval(this.startbreak,1000 )\n}\n\n//break functiion\n\nstartbreak = ()=> {\n\n  \n  console.log(breakbegan)\n  \n  breaksec = breaksec - 1\n  \n  if(breaksec  < 0){\n    \n    clearInterval(inte2);\n    clearInterval(inte)\n    \n  \n  \n    clicked = false;\n    \n    breakbegan = false\n    mintosec = this.state.session * 60\n      breaksec = this.state.break * 60\n      this.setState({\n        minute: this.convertS(mintosec),\n        st: 'Session'\n      })\n      // audioele.play()\n      var q1 = document.getElementById('beep');\n        q1.play();\n\nconsole.log(q1)\n      inte = setInterval(this.active, 1000)\n      \n  }\n  else{\n    var c = this.convertS(breaksec) \n    console.log(c)\n    this.setState({\n      st: 'Break',\n      minute: c,\n   \n     \n    })\n    // audioele.stop()\n     \n\n\n    \n  }\n  \n  \n\n}\n//start counter\ninte = () =>{\nclicked = !clicked\nif(clicked && breakbegan === false ){\n  \ninte = setInterval(this.active, 1000)\n\n}\nelse if(clicked && breakbegan === true){\n  inte2 = setInterval(this.startbreak, 1000)\n  \n}\nelse{\n  clearInterval(inte)\n  clearInterval(inte2)\n}\n\n\n}\n\n\n\n\n//start counter function\nactive = () => {\n  \n  mintosec = mintosec - 1\n\n\n    \n    if(mintosec < 0){\n      \n      clearInterval(inte);\n      clearInterval(inte2);\n      \n     \n    \n      breakbegan = !breakbegan\n     \n      mintosec = this.state.session * 60\n      breaksec = this.state.break * 60\n      this.setState({\n        minute: this.convertS(breaksec),\n        st: 'Break'\n      })\n      \n    // audioele.play()\n    var q1 = document.getElementById('beep');\n        q1.play();\n\nconsole.log(q1)\n      \n      inte2 = setInterval(this.startbreak,1000 )\n      \n    }\n    else{\n        \n      var c = this.convertS(mintosec) \n      console.log(c)\n      this.setState({\n        st: 'Session',\n        minute: c,\n     \n       \n      })\n    // audioele.stop()\n      \n    }\n    \n    \n\n\n}\n\nup = (what) => {\nif(what === 'session'){\n  if(this.state.session !== 60){\n    var min = this.state.session + 1;\n   \n    mintosec  = min * 60\n\n    this.setState({\n      session: this.state.session + 1 ,\n      minute: this.convertS(min * 60)\n\n    })\n  }\n}\nif(what === 'break'){\n  if(this.state.break !== 60){\n    breaksec = (this.state.break + 1) * 60\n    this.setState({\n      break: this.state.break + 1\n    })\n  }\n}\n}\n\ndown = (what) => {\n  if(what === 'session'){\n    var min = this.state.session - 1;\n    \n    if(this.state.session !== 1){\n      mintosec  = min * 60\n      this.setState({\n        session: this.state.session - 1,\n        minute: this.convertS(min * 60) \n\n      })\n    }\n  }\n\n  if(what === 'break'){\n    if(this.state.break !== 1){\n      breaksec = (this.state.break - 1) * 60\n      this.setState({\n        break: this.state.break - 1\n      })\n     \n    }\n  }\n}\n\n  render(){\n    return (\n      <div style={back}>\n        <audio  className='clip'  id='beep' src='https://sampleswap.org/samples-ghost/DRUM%20LOOPS%20and%20BREAKS/000%20to%20080%20bpm/1182[kb]070_laidback-swingy-kick-snare-hat.wav.mp3'></audio>\n      <div style={calBack} >\n        <div style={sep}>\n          <div style={pos}>\n          \n\n          </div>\n          \n         \n\n        </div>\n        <div style={CalLayout}>\n        <div></div>\n        <div style={ses}>\n          <h1>Pomodoro Clock</h1>\n          <div style={twocol}>\n            <div>\n              <h3 id='break-label'>Break Length</h3>\n              <div style={three}>\n                <button id=\"break-increment\" onClick={this.up.bind(this, 'break')}>up</button>\n                <label id=\"break-length\">{this.state.break}</label>\n                <button id=\"break-decrement\" onClick={this.down.bind(this, 'break')}>Down</button>\n\n              </div>\n              </div> \n              <div>\n                <h3 id=\"session-label\">Session Length</h3>\n                <div style={three}>\n                <button id=\"session-increment\" onClick={this.up.bind(this, 'session')}>up</button>\n         <label id=\"session-length\">{this.state.session}</label>\n                <button id=\"session-decrement\" onClick={this.down.bind(this, 'session')}>Down</button>\n\n                </div>\n              </div>\n           \n            \n              <div style={ses2}>\n        <h2 id=\"timer-label\">{this.state.st}</h2>\n        <div>\n        <label id='time-left'>{this.state.minute}</label>\n       \n          </div>\n                <button id='start_stop' onClick={this.inte}>Start/Stop</button>\n                <button id='reset' onClick={this.reset}>Reset</button>\n         </div>\n          </div>\n        \n\n        </div>\n\n         \n\n\n     \n        </div>\n\n      </div>\n    </div>\n    \n    );\n    \n}\n\n}\n\n\nconst three = {\n  display: 'grid',\n  gridTemplateColumns: '1fr 1fr 1fr',\n}\n\nconst pos = {\nposition: 'relative',\n\n\n\n\n\n\n}\n\nconst ses = {\n\n  display: 'grid',\n  gridTemplateRows: '1fr 2fr 1fr'\n}\n\nconst ses2 = {\n\n  display: 'grid',\n  gridTemplateRows: '.5fr .5fr .5fr'\n}\n\n\n\n\n\nconst CalLayout = {\ndisplay: 'grid',\ngridTemplateColumns: '.5fr 2fr .5fr',\n// gridTemplateRows: '1fr 1fr 1fr 1fr 1fr 1fr',\nheight: '100%',\nwidth: '100%'\n\n}\n\nconst sep ={\ndisplay: 'grid',\n\ngridTemplateRows: '1fr 1fr',\n\n}\n\nconst calBack = {\ndisplay: 'grid',\n\ngridTemplateRows: '20% 80%',\n\n\nposition: 'absolute',\ntop:'100px',\n\nbackgroundColor: '#202027',\nwidth: '100%',\nheight: '100%',\n\n}\n\nconst twocol ={\n  display: 'grid',\n  gridTemplateColumns: '1fr 1fr',\n \n  \n}\n\n      \n  \n\n\n\n\n\nconst back = {\n  backgroundColor: '#202027'\n}\n\n// const inside = {\n//   display: 'grid',\n//   gridTemplateColumn: 'auto',\n \n//   backgroundColor: '#202027',\n//   position: 'relative',\n\n//   top: '200px',\n  \n// }\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}